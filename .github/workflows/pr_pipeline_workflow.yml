name: iOS Advanced CI Pipeline

# Only trigger on PR/MR events + manual trigger
on:
  # When PR/MR is raised or updated - WORKS FOR ALL BRANCHES! ‚úÖ
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    # NO branch restrictions = runs on PRs to ANY branch
  
  # Manual trigger with full control
  workflow_dispatch:
    inputs:
      pipeline_type:
        description: 'Select Pipeline Type'
        required: true
        default: 'pre-merge'
        type: choice
        options:
        - 'quick-check'      # Fast: Lint + Syntax (30 seconds)
        - 'pre-merge'        # Standard: + Build + Unit tests (3-5 min)
        - 'full-validation'  # Complete: + UI tests (8-12 minutes)
        - 'custom'           # Choose individual options
      
      # Custom options
      run_lint:
        description: 'SwiftLint code quality'
        required: false
        default: true
        type: boolean
      run_syntax_check:
        description: 'Swift syntax validation'
        required: false
        default: true
        type: boolean
      run_build:
        description: 'Full simulator build'
        required: false
        default: false
        type: boolean
      run_unit_tests:
        description: 'Unit tests with coverage'
        required: false
        default: false
        type: boolean
      run_ui_tests:
        description: 'UI automation tests'
        required: false
        default: false
        type: boolean

# Default pipeline level for PR triggers
env:
  # Use pre-merge as default for all PR events
  PIPELINE_TYPE: ${{ github.event.inputs.pipeline_type || 'pre-merge' }}

jobs:
  # üîç Job 1: SwiftLint (Code Quality) - DISABLED FOR NOW
  # lint:
  #   name: "üîç SwiftLint"
  #   runs-on: macos-14  # Latest macOS runner
  #   if: ${{ github.event.inputs.pipeline_type != 'custom' || github.event.inputs.run_lint == 'true' }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4  # ‚úÖ Latest is v4 (not v5)
  #
  #     - name: Cache SwiftLint
  #       uses: actions/cache@v4  # ‚úÖ Latest is v4 (not v5)
  #       with:
  #         path: /opt/homebrew/bin/swiftlint
  #         key: ${{ runner.os }}-swiftlint-${{ runner.arch }}
  #         restore-keys: |
  #           ${{ runner.os }}-swiftlint-
  #
  #     - name: Run SwiftLint
  #       run: |
  #         cd JoyfillSwiftUIExample
  #
  #         # Install SwiftLint if not cached
  #         if ! which swiftlint >/dev/null; then
  #           echo "Installing SwiftLint..."
  #           brew install swiftlint
  #         fi
  #
  #         # Run SwiftLint but don't fail the job on warnings/errors
  #         echo "Running SwiftLint..."
  #         set +e  # Don't exit on error
  #         swiftlint lint --reporter github-actions-logging
  #         LINT_EXIT_CODE=$?
  #         swiftlint lint --reporter html > swiftlint-report.html
  #         set -e  # Re-enable exit on error
  #
  #         # Report results but don't fail
  #         if [ $LINT_EXIT_CODE -eq 0 ]; then
  #           echo "‚úÖ SwiftLint: No issues found!"
  #         elif [ $LINT_EXIT_CODE -eq 2 ]; then
  #           echo "‚ö†Ô∏è SwiftLint: Found warnings/errors (see report)"
  #           echo "::warning::SwiftLint found code quality issues. Check the uploaded report for details."
  #         else
  #           echo "‚ùå SwiftLint: Unexpected error (exit code: $LINT_EXIT_CODE)"
  #         fi
  #
  #         # Always exit successfully so other jobs continue
  #         exit 0
  #
  #     - name: Upload SwiftLint Report
  #       uses: actions/upload-artifact@v4  # Updated to v4
  #       if: always()
  #       with:
  #         name: swiftlint-report
  #         path: JoyfillSwiftUIExample/swiftlint-report.html
  #         retention-days: 30  # Auto-cleanup after 30 days

  # ‚ö° Job 1: Swift Syntax Check (Super Fast) - Now Job #1
  syntax-check:
    name: "‚ö° Syntax Check"
    runs-on: macos-14  # Latest macOS runner
    if: ${{ github.event.inputs.pipeline_type != 'custom' || github.event.inputs.run_syntax_check == 'true' }}
    # Remove dependency on lint job so it runs independently
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'  # Always use latest stable

      - name: Swift Syntax Validation
        run: |
          cd JoyfillSwiftUIExample
          echo "üîç Validating Swift syntax..."
          
          # More robust syntax check with better error reporting
          SYNTAX_ERRORS=0
          while IFS= read -r -d '' file; do
            echo "Checking: $file"
            if ! xcrun swift -frontend -parse "$file" -sdk $(xcrun --show-sdk-path --sdk iphonesimulator) 2>/dev/null; then
              echo "‚ùå Syntax error in: $file"
              ((SYNTAX_ERRORS++))
            fi
          done < <(find . -name "*.swift" -not -path "./Pods/*" -not -path "./build/*" -not -path "./DerivedData/*" -print0)
          
          if [ $SYNTAX_ERRORS -gt 0 ]; then
            echo "‚ùå Found $SYNTAX_ERRORS files with syntax errors"
            exit 1
          else
            echo "‚úÖ All Swift files have valid syntax!"
          fi

  # üèóÔ∏è Job 2: Full Build - Now Job #2
  build:
    name: "üèóÔ∏è Build"
    runs-on: macos-14  # Latest macOS runner
    if: ${{ github.event_name == 'pull_request' || github.event.inputs.pipeline_type == 'pre-merge' || github.event.inputs.pipeline_type == 'full-validation' || (github.event.inputs.pipeline_type == 'custom' && github.event.inputs.run_build == 'true') }}
    needs: [syntax-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Cache Xcode derived data
        uses: actions/cache@v4  # Updated to v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-${{ runner.arch }}-xcode-${{ hashFiles('JoyfillSwiftUIExample/**/*.swift', 'JoyfillSwiftUIExample/**/*.m', 'JoyfillSwiftUIExample/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-xcode-

      - name: Install xcpretty
        run: |
          if ! gem list xcpretty -i; then
            gem install xcpretty
          fi

      - name: Build for Simulator
        run: |
          set -o pipefail
          cd JoyfillSwiftUIExample
          
          echo "üîç Checking Xcode and project setup..."
          
          # Check if project file exists
          if [ ! -f "JoyfillExample.xcodeproj/project.pbxproj" ]; then
            echo "‚ùå Project file not found: JoyfillExample.xcodeproj"
            echo "Available files:"
            ls -la
            exit 1
          fi
          
          # Check available schemes
          echo "Available schemes:"
          xcodebuild -list -project JoyfillExample.xcodeproj || echo "Could not list schemes"
          
          # Check available simulators
          echo "Available simulators:"
          xcrun simctl list devices iPhone --json | jq -r '.devices | to_entries[] | select(.key | contains("iOS")) | .value[] | select(.name | contains("iPhone")) | "\(.name) (\(.udid))"' || xcrun simctl list devices | grep iPhone
          
          echo "üèóÔ∏è Starting build..."
          
          # Build with more verbose output for debugging
          xcodebuild clean build \
            -project JoyfillExample.xcodeproj \
            -scheme JoyfillExample \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' \
            -configuration Debug \
            -derivedDataPath ./DerivedData \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            EXCLUDED_ARCHS=arm64 \
            ONLY_ACTIVE_ARCH=YES \
            -verbose \
          | tee build-output.log
          
          # Check if build was successful
          BUILD_RESULT=${PIPESTATUS[0]}
          if [ $BUILD_RESULT -ne 0 ]; then
            echo "‚ùå Build failed with exit code: $BUILD_RESULT"
            echo "Last 50 lines of build output:"
            tail -50 build-output.log
            exit $BUILD_RESULT
          fi
          
          echo "‚úÖ Build completed successfully!"

      - name: Upload Build Output Log
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-output-log-${{ github.run_number }}
          path: JoyfillSwiftUIExample/build-output.log
          retention-days: 7

      - name: Upload Build Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-report-${{ github.run_number }}  # Unique name
          path: JoyfillSwiftUIExample/build-report.html
          retention-days: 30

  # üß™ Job 3: Unit Tests - Now Job #3
  unit-tests:
    name: "üß™ Unit Tests"
    runs-on: macos-14
    if: ${{ github.event_name == 'pull_request' || github.event.inputs.pipeline_type == 'pre-merge' || github.event.inputs.pipeline_type == 'full-validation' || (github.event.inputs.pipeline_type == 'custom' && github.event.inputs.run_unit_tests == 'true') }}
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Cache Xcode derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-${{ runner.arch }}-xcode-${{ hashFiles('JoyfillSwiftUIExample/**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-xcode-

      - name: Install xcpretty
        run: |
          if ! gem list xcpretty -i; then
            gem install xcpretty
          fi

      - name: Run Unit Tests
        run: |
          set -o pipefail
          cd JoyfillSwiftUIExample
          
          xcodebuild test \
            -project JoyfillExample.xcodeproj \
            -scheme JoyfillTests \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' \
            -configuration Debug \
            -derivedDataPath ./DerivedData \
            -enableCodeCoverage YES \
            -resultBundlePath ./TestResults.xcresult \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            EXCLUDED_ARCHS=arm64 \
            ONLY_ACTIVE_ARCH=YES \
          | xcpretty --color --report html --output unit-test-report.html
          
          echo "‚úÖ Unit tests completed!"

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-${{ github.run_number }}
          path: |
            JoyfillSwiftUIExample/unit-test-report.html
            JoyfillSwiftUIExample/TestResults.xcresult
          retention-days: 30

  # üñ±Ô∏è Job 4: UI Tests - Now Job #4
  ui-tests:
    name: "üñ±Ô∏è UI Tests"
    runs-on: macos-14
    if: ${{ github.event.inputs.pipeline_type == 'full-validation' || (github.event.inputs.pipeline_type == 'custom' && github.event.inputs.run_ui_tests == 'true') }}
    needs: [build]
    timeout-minutes: 30  # ‚Üê HERE IS THE 30-MINUTE TIMEOUT! üéØ
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Cache Xcode derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-${{ runner.arch }}-xcode-${{ hashFiles('JoyfillSwiftUIExample/**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-xcode-

      - name: Install xcpretty
        run: |
          if ! gem list xcpretty -i; then
            gem install xcpretty
          fi

      - name: Run UI Tests
        run: |
          set -o pipefail
          cd JoyfillSwiftUIExample
          
          # Boot simulator first
          xcrun simctl boot "iPhone 16 Pro" || true
          xcrun simctl list devices
          
          xcodebuild test \
            -project JoyfillExample.xcodeproj \
            -scheme JoyfillUITests \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' \
            -configuration Debug \
            -derivedDataPath ./DerivedData \
            -resultBundlePath ./UITestResults.xcresult \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            EXCLUDED_ARCHS=arm64 \
            ONLY_ACTIVE_ARCH=YES \
          | xcpretty --color --report html --output ui-test-report.html
          
          echo "‚úÖ UI tests completed!"

      - name: Upload UI Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results-${{ github.run_number }}
          path: |
            JoyfillSwiftUIExample/ui-test-report.html
            JoyfillSwiftUIExample/UITestResults.xcresult
          retention-days: 30

  # üìä Job 5: Results Summary - Now Job #5
  results-summary:
    name: "üìä Results Summary"
    runs-on: macos-14
    needs: [syntax-check, build, unit-tests, ui-tests]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "# üìä CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ö° Syntax Check | ${{ needs.syntax-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üèóÔ∏è Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üß™ Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üñ±Ô∏è UI Tests | ${{ needs.ui-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.syntax-check.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "## ‚úÖ Build Status: PASSING" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Build Status: FAILING" >> $GITHUB_STEP_SUMMARY
          fi
