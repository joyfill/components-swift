name: iOS Advanced CI Pipeline

# Only trigger on PR/MR events + manual trigger
on:
  # When PR/MR is raised or updated - WORKS FOR ALL BRANCHES! ‚úÖ
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    # NO branch restrictions = runs on PRs to ANY branch
  
  # Manual trigger with full control
  workflow_dispatch:
    inputs:
      pipeline_type:
        description: 'Select Pipeline Type'
        required: true
        default: 'pre-merge'
        type: choice
        options:
        - 'quick-check'      # Fast: Syntax only (30 seconds)
        - 'pre-merge'        # Standard: Syntax + Build + Unit tests (3-5 min)
        - 'full-validation'  # Complete: Syntax + Build + Unit + UI tests (8-12 minutes)
        - 'with-lint'        # Pre-merge + SwiftLint (5-7 minutes)
        - 'custom'           # Choose individual options
      
      # Custom options
      run_lint:
        description: 'SwiftLint code quality'
        required: false
        default: true
        type: boolean
      run_syntax_check:
        description: 'Swift syntax validation'
        required: false
        default: true
        type: boolean
      run_build:
        description: 'Full simulator build'
        required: false
        default: false
        type: boolean
      run_unit_tests:
        description: 'Unit tests with coverage'
        required: false
        default: false
        type: boolean
      run_ui_tests:
        description: 'UI automation tests'
        required: false
        default: false
        type: boolean

# Default pipeline level for PR triggers
env:
  # Use pre-merge as default for all PR events  
  PIPELINE_TYPE: ${{ github.event.inputs.pipeline_type || 'pre-merge' }}

jobs:
  # üîç Job 1: SwiftLint (Code Quality)
  lint:
    name: "üîç SwiftLint"
    runs-on: macos-14  # Latest macOS runner
    if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.pipeline_type == 'with-lint' || (github.event.inputs.pipeline_type == 'custom' && github.event.inputs.run_lint == 'true')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # ‚úÖ Latest is v4 (not v5)

      - name: Cache SwiftLint
        uses: actions/cache@v4  # ‚úÖ Latest is v4 (not v5)
        with:
          path: /opt/homebrew/bin/swiftlint
          key: ${{ runner.os }}-swiftlint-${{ runner.arch }}
          restore-keys: |
            ${{ runner.os }}-swiftlint-

      - name: Run SwiftLint
        run: |
          cd JoyfillSwiftUIExample
          
          # Install SwiftLint if not cached
          if ! which swiftlint >/dev/null; then
            echo "Installing SwiftLint..."
            brew install swiftlint
          fi
          
          # Run SwiftLint with proper error handling
          echo "Running SwiftLint..."
          swiftlint lint --reporter github-actions-logging --strict || LINT_EXIT_CODE=$?
          swiftlint lint --reporter html > swiftlint-report.html
          
          # Exit with proper code
          exit ${LINT_EXIT_CODE:-0}

      - name: Upload SwiftLint Report
        uses: actions/upload-artifact@v4  # Updated to v4
        if: always()
        with:
          name: swiftlint-report
          path: JoyfillSwiftUIExample/swiftlint-report.html
          retention-days: 30  # Auto-cleanup after 30 days

  # ‚ö° Job 2: Swift Syntax Check (Super Fast)
  syntax-check:
    name: "‚ö° Syntax Check"
    runs-on: macos-14  # Latest macOS runner
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.pipeline_type != 'custom' || github.event.inputs.run_syntax_check == 'true')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode.app  # Always use latest stable

      - name: Swift Syntax Validation
        run: |
          cd JoyfillSwiftUIExample
          echo "üîç Validating Swift syntax..."
          
          # More robust syntax check with better error reporting
          SYNTAX_ERRORS=0
          while IFS= read -r -d '' file; do
            echo "Checking: $file"
            if ! xcrun swift -frontend -parse "$file" -sdk $(xcrun --show-sdk-path --sdk iphonesimulator) 2>/dev/null; then
              echo "‚ùå Syntax error in: $file"
              ((SYNTAX_ERRORS++))
            fi
          done < <(find . -name "*.swift" -not -path "./Pods/*" -not -path "./build/*" -not -path "./DerivedData/*" -print0)
          
          if [ $SYNTAX_ERRORS -gt 0 ]; then
            echo "‚ùå Found $SYNTAX_ERRORS files with syntax errors"
            exit 1
          else
            echo "‚úÖ All Swift files have valid syntax!"
          fi

  # üèóÔ∏è Job 3: Full Build
  build:
    name: "üèóÔ∏è Build"
    runs-on: macos-14  # Latest macOS runner
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.pipeline_type == 'pre-merge' || github.event.inputs.pipeline_type == 'full-validation' || github.event.inputs.pipeline_type == 'with-lint' || (github.event.inputs.pipeline_type == 'custom' && github.event.inputs.run_build == 'true'))) }}
    needs: [syntax-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode.app


      - name: Install xcpretty
        run: |
          if ! gem list xcpretty -i; then
            gem install xcpretty
          fi

      - name: Build for Simulator
        run: |
          set -o pipefail
          cd JoyfillSwiftUIExample
          
          xcodebuild clean build \
            -project JoyfillExample.xcodeproj \
            -scheme JoyfillExample \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.2' \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            EXCLUDED_ARCHS=arm64 \
            ONLY_ACTIVE_ARCH=YES \
          | xcpretty --color --report html --output build-report.html
          
          echo "‚úÖ Build completed successfully!"

      - name: Upload Build Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-report-${{ github.run_number }}  # Unique name
          path: JoyfillSwiftUIExample/build-report.html
          retention-days: 30

  # üß™ Job 4: Unit Tests
  unit-tests:
    name: "üß™ Unit Tests"
    runs-on: macos-14
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.pipeline_type == 'pre-merge' || github.event.inputs.pipeline_type == 'full-validation' || github.event.inputs.pipeline_type == 'with-lint' || (github.event.inputs.pipeline_type == 'custom' && github.event.inputs.run_unit_tests == 'true'))) }}
    timeout-minutes: 30
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode.app


      - name: Install xcpretty
        run: |
          if ! gem list xcpretty -i; then
            gem install xcpretty
          fi

      - name: Run Unit Tests
        run: |
          set -o pipefail
          cd JoyfillSwiftUIExample
          xcodebuild test \
            -project JoyfillExample.xcodeproj \
            -scheme JoyfillTests \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.2' \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            EXCLUDED_ARCHS=arm64 \
            ONLY_ACTIVE_ARCH=YES \
          | xcpretty --color --report html --output unit-test-report.html

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-${{ github.run_number }}
          path: |
            JoyfillSwiftUIExample/unit-test-report.html
            JoyfillSwiftUIExample/TestResults.xcresult
          retention-days: 30

  # üñ±Ô∏è Job 5: UI Tests
  ui-tests:
    name: "üñ±Ô∏è UI Tests"
    runs-on: macos-14
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.pipeline_type == 'full-validation' || (github.event.inputs.pipeline_type == 'custom' && github.event.inputs.run_ui_tests == 'true'))) }}
    continue-on-error: true
    timeout-minutes: 240
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode.app


      - name: Install xcpretty
        run: |
          if ! gem list xcpretty -i; then
            gem install xcpretty
          fi

      - name: Boot Multiple iPad Simulators
        run: |
          # Check available runtimes and device types first
          echo "Checking available iOS runtimes:"
          xcrun simctl list runtimes | grep iOS
          
          echo "Checking available iPad device types:"
          xcrun simctl list devicetypes | grep -i ipad
          
          # Create and boot multiple iPad simulators for parallel testing
          echo "Creating and booting iPad simulators for parallel testing..."
          
          # Extract the iOS runtime identifier correctly
          IOS_RUNTIME=$(xcrun simctl list runtimes | grep "iOS" | tail -1 | awk -F'[()]' '{print $4}')
          echo "Using iOS runtime: $IOS_RUNTIME"
          
          # Use the best available iPad Pro M4 13-inch
          IPAD_TYPE="iPad Pro 13-inch (M4)"
          if ! xcrun simctl list devicetypes | grep -q "iPad Pro 13-inch (M4)"; then
            # Fallback to iPad Pro 12.9-inch if M4 not available
            IPAD_TYPE="iPad Pro (12.9-inch) (6th generation)"
          fi
          
          echo "Using iPad type: $IPAD_TYPE"
          
          # Create 5 iPad simulators if they don't exist
          xcrun simctl create "iPad-Test-1" "$IPAD_TYPE" "$IOS_RUNTIME" || true
          xcrun simctl create "iPad-Test-2" "$IPAD_TYPE" "$IOS_RUNTIME" || true
          xcrun simctl create "iPad-Test-3" "$IPAD_TYPE" "$IOS_RUNTIME" || true
          xcrun simctl create "iPad-Test-4" "$IPAD_TYPE" "$IOS_RUNTIME" || true
          xcrun simctl create "iPad-Test-5" "$IPAD_TYPE" "$IOS_RUNTIME" || true
          
          # Boot all iPad simulators in parallel
          xcrun simctl boot "iPad-Test-1" || true &
          xcrun simctl boot "iPad-Test-2" || true &
          xcrun simctl boot "iPad-Test-3" || true &
          xcrun simctl boot "iPad-Test-4" || true &
          xcrun simctl boot "iPad-Test-5" || true &
          
          # Wait for all simulators to boot
          wait
          sleep 20
          
          # Verify simulators are running
          echo "Available iPad simulators:"
          xcrun simctl list devices | grep "iPad-Test"

      - name: Run UI Tests (Parallel iPad Execution)
        run: |
          set -o pipefail
          cd JoyfillSwiftUIExample
          
          # Get the iOS runtime identifier dynamically
          IOS_RUNTIME=$(xcrun simctl list runtimes | grep "iOS" | tail -1 | awk -F'[()]' '{print $4}')
          echo "Running UI tests in parallel across 5 iPad simulators with runtime $IOS_RUNTIME..."
          
          xcodebuild test \
            -project JoyfillExample.xcodeproj \
            -scheme JoyfillUITests \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,name=iPad-Test-1" \
            -destination "platform=iOS Simulator,name=iPad-Test-2" \
            -destination "platform=iOS Simulator,name=iPad-Test-3" \
            -destination "platform=iOS Simulator,name=iPad-Test-4" \
            -destination "platform=iOS Simulator,name=iPad-Test-5" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            EXCLUDED_ARCHS=arm64 \
            ONLY_ACTIVE_ARCH=YES \
            SWIFT_COMPILATION_MODE=wholemodule \
            DEBUG_INFORMATION_FORMAT=dwarf \
            ENABLE_TESTABILITY=YES \
            -parallel-testing-enabled YES \
            -maximum-parallel-testing-workers 5 \
          | xcpretty --color --report html --output ui-test-report.html

      - name: Upload UI Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results-${{ github.run_number }}
          path: |
            JoyfillSwiftUIExample/ui-test-report.html
            JoyfillSwiftUIExample/UITestResults.xcresult
          retention-days: 30

  # üìä Job 6: Results Summary
  results-summary:
    name: "üìä Results Summary"
    runs-on: macos-14
    needs: [lint, syntax-check, build, unit-tests, ui-tests]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "# üìä CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üîç SwiftLint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ö° Syntax Check | ${{ needs.syntax-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üèóÔ∏è Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üß™ Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üñ±Ô∏è UI Tests | ${{ needs.ui-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status - consider success if core jobs (syntax, build, unit tests) pass
          # UI tests can fail but still allow merging (continue-on-error: true)
          # Lint is optional and can be skipped
          LINT_OK="${{ needs.lint.result == 'success' || needs.lint.result == 'skipped' }}"
          SYNTAX_OK="${{ needs.syntax-check.result == 'success' }}"
          BUILD_OK="${{ needs.build.result == 'success' || needs.build.result == 'skipped' }}"
          UNIT_OK="${{ needs.unit-tests.result == 'success' }}"
          
          # UI test result for display (can be failure but still OK for merging)
          UI_STATUS="${{ needs.ui-tests.result }}"
          
          if [[ "$SYNTAX_OK" == "true" && "$BUILD_OK" == "true" && "$UNIT_OK" == "true" && "$LINT_OK" == "true" ]]; then
            echo "## ‚úÖ Build Status: PASSING" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ **All required jobs passed** - Ready to merge!" >> $GITHUB_STEP_SUMMARY
            
            # Show UI test status if it failed
            if [[ "$UI_STATUS" == "failure" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**UI Test Results (non-blocking):**" >> $GITHUB_STEP_SUMMARY
              echo "‚ö†Ô∏è UI tests failed but merging is still allowed" >> $GITHUB_STEP_SUMMARY
            else
              echo "All jobs completed successfully!" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ‚ùå Build Status: FAILING" >> $GITHUB_STEP_SUMMARY
            echo "Required jobs failed. Fix these before merging:" >> $GITHUB_STEP_SUMMARY
            if [[ "$SYNTAX_OK" != "true" ]]; then
              echo "‚ùå Syntax check failed" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ "$BUILD_OK" != "true" ]]; then
              echo "‚ùå Build failed" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ "$UNIT_OK" != "true" ]]; then
              echo "‚ùå Unit tests failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
