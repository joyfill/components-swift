import XCTest
import Foundation
import SwiftUI
import JoyfillModel
import Joyfill

final class MobileTitleDisplayTests: XCTestCase {
    
    func documentEditor(document: JoyDoc) -> DocumentEditor {
        DocumentEditor(document: document)
    }
    
    func jsonDocument(jsonName: String) -> JoyDoc {
        let path = Bundle.main.path(forResource: jsonName, ofType: "json")!
        let data = try! Data(contentsOf: URL(fileURLWithPath: path), options: .mappedIfSafe)
        let dict = try! JSONSerialization.jsonObject(with: data, options: .mutableLeaves) as! [String: Any]
        return JoyDoc(dictionary: dict)
    }
    /// Test Scenario 1: Auto-generated mobile view (no dedicated mobile view exists)
    /// Expected: All field titles should be displayed as "inline" regardless of desktop setting
    func testAutoGeneratedMobileView_ShouldShowAllTitles() {
        let document = jsonDocument(jsonName: "AllFieldTitleDispalayed")
        let documentEditor = documentEditor(document: document)
        
        // Verify that no dedicated mobile view exists
        XCTAssertFalse(documentEditor.isMobileViewActive, "This test expects no dedicated mobile view")
        
        // Get field positions after mobile transformation
        let fieldPositions = documentEditor.mapWebViewToMobileViewIfNeeded(
            fieldPositions: document.fieldPositionsForCurrentView,
            isMobileViewActive: documentEditor.isMobileViewActive
        )
        
        // Both fields should have titleDisplay set to "inline"
        XCTAssertEqual(fieldPositions.count, 2, "Should have 2 field positions")
        
        let textFieldPosition = fieldPositions.first { $0.field == "685c17899719520979c0785d" }
        XCTAssertNotNil(textFieldPosition, "Text field position should exist")
        XCTAssertEqual(textFieldPosition?.titleDisplay, "inline", "Text field title should be forced to 'inline' for auto-generated mobile view")
        
        let numberFieldPosition = fieldPositions.first { $0.field == "685c178e92ac1037adfcc697" }
        XCTAssertNotNil(numberFieldPosition, "Number field position should exist")
        XCTAssertEqual(numberFieldPosition?.titleDisplay, "inline", "Number field title should be forced to 'inline' for auto-generated mobile view")
        
        // Verify that field headers would be created (not nil)
        if let textPosition = textFieldPosition {
            let shouldShowTitle = (textPosition.titleDisplay == nil || textPosition.titleDisplay != "none")
            XCTAssertTrue(shouldShowTitle, "Text field title should be visible")
        }
        
        if let numberPosition = numberFieldPosition {
            let shouldShowTitle = (numberPosition.titleDisplay == nil || numberPosition.titleDisplay != "none")
            XCTAssertTrue(shouldShowTitle, "Number field title should be visible")
        }
    }
    
    /// Test Scenario 2: Dedicated mobile view exists
    /// Expected: Only fields with titleDisplay "none" in mobile view should be hidden
    func testDedicatedMobileView_ShouldRespectMobileTitleDisplay() {
        let document = jsonDocument(jsonName: "FieldTitleNotDisplayed")
        let documentEditor = documentEditor(document: document)
        
        // Verify that dedicated mobile view exists
        XCTAssertTrue(documentEditor.isMobileViewActive, "This test expects a dedicated mobile view")
        
        // Get field positions from mobile view (no transformation needed since mobile view exists)
        let fieldPositions = documentEditor.mapWebViewToMobileViewIfNeeded(
            fieldPositions: document.fieldPositionsForCurrentView,
            isMobileViewActive: documentEditor.isMobileViewActive
        )
        
        // Should have 2 unique fields
        XCTAssertEqual(fieldPositions.count, 2, "Should have 2 field positions")
        
        let textFieldPosition = fieldPositions.first { $0.field == "685c17899719520979c0785d" }
        XCTAssertNotNil(textFieldPosition, "Text field position should exist")
        XCTAssertEqual(textFieldPosition?.titleDisplay, "none", "Text field title should be 'none' as specified in mobile view")
        
        let numberFieldPosition = fieldPositions.first { $0.field == "685c178e92ac1037adfcc697" }
        XCTAssertNotNil(numberFieldPosition, "Number field position should exist")
        XCTAssertEqual(numberFieldPosition?.titleDisplay, "inline", "Number field title should be 'inline' as specified in mobile view")
        
        // Verify field header visibility
        if let textPosition = textFieldPosition {
            let shouldShowTitle = (textPosition.titleDisplay == nil || textPosition.titleDisplay != "none")
            XCTAssertFalse(shouldShowTitle, "Text field title should be hidden")
        }
        
        if let numberPosition = numberFieldPosition {
            let shouldShowTitle = (numberPosition.titleDisplay == nil || numberPosition.titleDisplay != "none")
            XCTAssertTrue(shouldShowTitle, "Number field title should be visible")
        }
    }
    
    /// Test the DocumentEditor property that detects mobile view
         func testIsMobileViewActiveDetection() {
         let scenario1Doc = jsonDocument(jsonName: "AllFieldTitleDispalayed")
         let scenario1Editor = documentEditor(document: scenario1Doc)
         XCTAssertFalse(scenario1Editor.isMobileViewActive, "Scenario 1 should not have mobile view active")
         
         let scenario2Doc = jsonDocument(jsonName: "FieldTitleNotDisplayed")
         let scenario2Editor = documentEditor(document: scenario2Doc)
         XCTAssertTrue(scenario2Editor.isMobileViewActive, "Scenario 2 should have mobile view active")
     }
     
     /// Test that fields are ordered by Y position in mobile view
     func testFieldOrderingByYPosition() {
         let document = jsonDocument(jsonName: "FieldTitleNotDisplayed")
         let documentEditor = documentEditor(document: document)
         
         // Get field positions after mobile transformation
         let fieldPositions = documentEditor.mapWebViewToMobileViewIfNeeded(
             fieldPositions: document.fieldPositionsForCurrentView,
             isMobileViewActive: documentEditor.isMobileViewActive
         )
         
         // Verify fields are ordered by Y position
         for i in 0..<(fieldPositions.count - 1) {
             let currentField = fieldPositions[i]
             let nextField = fieldPositions[i + 1]
             
             guard let currentY = currentField.y, let nextY = nextField.y else {
                 XCTFail("Field positions should have Y coordinates")
                 continue
             }
             
             // Current field Y should be <= next field Y (ascending order)
             XCTAssertLessThanOrEqual(Int(currentY), Int(nextY), 
                 "Fields should be ordered by Y position. Field at index \(i) has Y=\(currentY), field at index \(i+1) has Y=\(nextY)")
         }
         
         // Verify specific fields from our test data are in correct order
         let textField = fieldPositions.first { $0.field == "685c17899719520979c0785d" }
         let numberField = fieldPositions.first { $0.field == "685c178e92ac1037adfcc697" }
         
         XCTAssertNotNil(textField, "Text field should exist")
         XCTAssertNotNil(numberField, "Number field should exist")
         
         if let textField = textField, let numberField = numberField,
            let textY = textField.y, let numberY = numberField.y {
             // In our test data, text field has Y=0, number field has Y=64
             XCTAssertLessThan(Int(textY), Int(numberY), "Text field (Y=\(textY)) should come before number field (Y=\(numberY))")
         }
     }
 }
